package com.dzovah.mesha.Database.Entities;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;
import androidx.annotation.NonNull;

/**
 * Entity class representing a transaction category in the Mesha financial management system.
 * <p>
 * Categories are used to organize and analyze transactions based on their purpose or type.
 * Each transaction is assigned to a category to facilitate expense tracking, budgeting,
 * and financial reporting.
 * </p>
 * <p>
 * The Mesha app comes with default categories (e.g., Food, Transportation, Utilities),
 * but users can also create custom categories to fit their specific needs.
 * </p>
 *
 * @author Electra Magus
 * @version 1.0
 * @see Transaction
 */
@Entity(tableName = "Categories")
public class Category {

    /**
     * Unique identifier for the Category.
     * This ID is auto-generated by Room when a new Category is inserted into the database.
     */
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "Category_id")
    private int categoryId;

    /**
     * The name of the category.
     * This field is required and used for display and identification purposes.
     */
    @NonNull
    @ColumnInfo(name = "Category")
    private String category;

    /**
     * Optional description of the category.
     * This provides additional context about the purpose or scope of the category.
     */
    @ColumnInfo(name = "description")
    private String description;

    /**
     * Primary constructor that Room will use to create a Category with a name and description.
     *
     * @param category The name of the category (required)
     * @param description The description of the category (optional)
     */
    public Category(@NonNull String category, String description) {
        this.category = category;
        this.description = description;
    }

    /**
     * Secondary constructor for creating a Category with just a name.
     * The description will be set to an empty string.
     * <p>
     * This constructor is ignored by Room to avoid confusion with the primary constructor.
     * </p>
     *
     * @param category The name of the category (required)
     */
    @Ignore
    public Category(@NonNull String category) {
        this.category = category;
        this.description = "";
    }

    /**
     * Default empty constructor.
     * <p>
     * This constructor is ignored by Room to avoid confusion with the primary constructor.
     * It's provided for flexibility in creating instances without initial values.
     * </p>
     */
    @Ignore
    public Category() {
    }

    /**
     * Gets the unique identifier for this Category.
     *
     * @return The Category ID
     */
    public int getCategoryId() {
        return categoryId;
    }

    /**
     * Sets the unique identifier for this Category.
     * This is typically managed by Room and not set manually.
     *
     * @param categoryId The Category ID to set
     */
    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    /**
     * Gets the name of this Category.
     *
     * @return The Category name
     */
    @NonNull
    public String getCategory() {
        return category;
    }

    /**
     * Sets the name of this Category.
     *
     * @param category The Category name to set (cannot be null)
     */
    public void setCategory(@NonNull String category) {
        this.category = category;
    }

    /**
     * Gets the description of this Category.
     *
     * @return The Category description, or an empty string if no description was set
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of this Category.
     *
     * @param description The Category description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
}
