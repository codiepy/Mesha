package com.dzovah.mesha.Database.Entities;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

import java.util.List;

/**
 * Entity class representing a top-level account in the Mesha financial management system.
 * <p>
 * An AlphaAccount represents a primary financial container that can hold multiple BetaAccounts
 * (sub-accounts). The total balance of an AlphaAccount is the sum of all its associated
 * BetaAccount balances.
 * </p>
 * <p>
 * AlphaAccounts are used to organize financial resources at a high level, such as
 * grouping accounts by institution or purpose.
 * </p>
 *
 * @author Electra Magus
 * @version 1.0
 * @see BetaAccount
 */
@Entity(tableName = "Alpha_accounts")
public class AlphaAccount {

    /**
     * Unique identifier for the AlphaAccount.
     * This ID is auto-generated by Room when a new AlphaAccount is inserted into the database.
     */
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "Alpha_account_id")
    private int alphaAccountId;

    /**
     * The name of the AlphaAccount.
     * This field is used for display and identification purposes.
     */
    @ColumnInfo(name = "Alpha_account_name")
    private String alphaAccountName;

    /**
     * The path to the icon image for this AlphaAccount.
     * This field contains a reference to an image resource used for visual identification.
     */
    @ColumnInfo(name = "Alpha_account_icon")
    private String alphaAccountIcon;

    /**
     * The current balance of the AlphaAccount.
     * This is calculated as the sum of all BetaAccount balances associated with this AlphaAccount.
     */
    @ColumnInfo(name = "Alpha_account_balance")
    private double alphaAccountBalance;

    /**
     * Creates a new AlphaAccount with the specified name, icon, and initial balance.
     *
     * @param alphaAccountName The name of the AlphaAccount
     * @param alphaAccountIcon The path to the icon image (null will use a default icon)
     * @param alphaAccountBalance The initial balance for the AlphaAccount
     */
    public AlphaAccount(String alphaAccountName, String alphaAccountIcon, double alphaAccountBalance) {
        this.alphaAccountName = alphaAccountName;
        this.alphaAccountIcon = alphaAccountIcon != null ? alphaAccountIcon : "Assets/icons"; // Default icon path
        this.alphaAccountBalance = alphaAccountBalance;
    }

    /**
     * Gets the unique identifier for this AlphaAccount.
     *
     * @return The AlphaAccount ID
     */
    public int getAlphaAccountId() {
        return alphaAccountId;
    }

    /**
     * Sets the unique identifier for this AlphaAccount.
     * This is typically managed by Room and not set manually.
     *
     * @param alphaAccountId The AlphaAccount ID to set
     */
    public void setAlphaAccountId(int alphaAccountId) {
        this.alphaAccountId = alphaAccountId;
    }

    /**
     * Gets the name of this AlphaAccount.
     *
     * @return The AlphaAccount name
     */
    public String getAlphaAccountName() {
        return alphaAccountName;
    }

    /**
     * Sets the name of this AlphaAccount.
     *
     * @param alphaAccountName The AlphaAccount name to set
     */
    public void setAlphaAccountName(String alphaAccountName) {
        this.alphaAccountName = alphaAccountName;
    }

    /**
     * Gets the path to the icon image for this AlphaAccount.
     *
     * @return The path to the icon image
     */
    public String getAlphaAccountIcon() {
        return alphaAccountIcon;
    }

    /**
     * Sets the path to the icon image for this AlphaAccount.
     *
     * @param alphaAccountIcon The path to the icon image to set
     */
    public void setAlphaAccountIcon(String alphaAccountIcon) {
        this.alphaAccountIcon = alphaAccountIcon;
    }

    /**
     * Gets the current balance of this AlphaAccount.
     *
     * @return The current balance
     */
    public double getAlphaAccountBalance() {
        return alphaAccountBalance;
    }

    /**
     * Sets the balance of this AlphaAccount.
     *
     * @param alphaAccountBalance The balance to set
     */
    public void setAlphaAccountBalance(double alphaAccountBalance) {
        this.alphaAccountBalance = alphaAccountBalance;
    }

    /**
     * Updates the balance of this AlphaAccount by calculating the sum of all
     * associated BetaAccount balances.
     * <p>
     * This method ensures that the AlphaAccount balance accurately reflects
     * the total of all its sub-accounts.
     * </p>
     *
     * @param betaAccounts A list of BetaAccounts associated with this AlphaAccount
     */
    public void updateBalanceFromBetaAccounts(List<BetaAccount> betaAccounts) {
        double totalBalance = 0;
        for (BetaAccount beta : betaAccounts) {
            totalBalance += beta.getBetaAccountBalance();
        }
        this.alphaAccountBalance = totalBalance;
    }
}
