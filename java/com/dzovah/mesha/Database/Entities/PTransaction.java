package com.dzovah.mesha.Database.Entities;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;
import androidx.room.Index;
import androidx.room.TypeConverters;

import com.dzovah.mesha.Database.Utils.TransactionType;
import com.dzovah.mesha.Database.Utils.TransactionTypeConverter;

/**
 * Entity class representing a financial transaction in the Mesha financial management system.
 * <p>
 * Transactions record the movement of money between accounts and categories. Each transaction
 * is associated with a specific BetaAccount and is categorized for analysis and reporting.
 * Transactions can be either debits (money out) or credits (money in).
 * </p>
 * <p>
 * The Transaction class is central to the financial tracking functionality of the Mesha app
 * and serves as the primary data point for reporting, analysis, and financial management.
 * </p>
 *
 * @author Electra Magus
 * @version 1.0
 * @see AlphaAccount
 * @see BetaAccount
 * @see Category
 * @see TransactionType
 */
@Entity(
    tableName = "PTransactions",
    indices = {
        @Index("PAlpha_account_id"),
        @Index("PBeta_account_id"),
        @Index("Category_id"),
        @Index("PEntry_time")
    },
    foreignKeys = {
        @ForeignKey(
            entity = PAlphaAccount.class,
            parentColumns = "PAlpha_account_id",
            childColumns = "PAlpha_account_id",
            onDelete = ForeignKey.CASCADE
        ),
        @ForeignKey(
            entity = PBetaAccount.class,
            parentColumns = "PBeta_account_id",
            childColumns = "PBeta_account_id",
            onDelete = ForeignKey.CASCADE
        ),
        @ForeignKey(
            entity = Category.class,
            parentColumns = "Category_id",
            childColumns = "Category_id",
            onDelete = ForeignKey.CASCADE
        )
    }
)
public class PTransaction {
    /**
     * Unique identifier for the Transaction.
     * This ID is auto-generated by Room when a new Transaction is inserted into the database.
     */
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "PTransaction_id")
    public int transactionId;

    /**
     * Foreign key reference to the associated AlphaAccount.
     * This field establishes the relationship between a Transaction and its parent AlphaAccount.
     */
    @ColumnInfo(name = "PAlpha_account_id")
    public int alphaAccountId;

    /**
     * Foreign key reference to the specific BetaAccount.
     * This field establishes the relationship between a Transaction and its specific BetaAccount.
     */
    @ColumnInfo(name = "PBeta_account_id")
    public int betaAccountId;

    /**
     * Foreign key reference to the transaction Category.
     * This field categorizes the transaction for analysis and reporting purposes.
     */
    @ColumnInfo(name = "Category_id")
    public int categoryId;

    /**
     * Description or note for the transaction.
     * This provides additional context about the purpose or details of the transaction.
     */
    @ColumnInfo(name = "PTransaction_description")
    public String transactionDescription;

    /**
     * The monetary amount of the transaction.
     * For debits, this represents money flowing out; for credits, money flowing in.
     */
    @ColumnInfo(name = "PTransaction_amount")
    public double transactionAmount;

    /**
     * The type of transaction (CREDIT or DEBIT).
     * This is converted to/from a database-friendly format using the TransactionTypeConverter.
     */
    @ColumnInfo(name = "PTransaction_type")
    @TypeConverters(TransactionTypeConverter.class)
    public TransactionType transactionType;

    /**
     * Timestamp when the transaction was recorded.
     * Stored as a Unix timestamp (milliseconds since epoch).
     */
    @ColumnInfo(name = "PEntry_time")
    public long entryTime;

    /**
     * Creates a new Transaction with the specified details.
     *
     * @param alphaAccountId The ID of the associated AlphaAccount
     * @param betaAccountId The ID of the specific BetaAccount
     * @param categoryId The ID of the transaction category
     * @param transactionDescription Description or note for the transaction
     * @param transactionAmount The monetary amount of the transaction
     * @param transactionType The type of transaction (CREDIT or DEBIT)
     * @param entryTime Timestamp when the transaction was recorded
     */
    public PTransaction(int alphaAccountId, int betaAccountId, int categoryId,
                      String transactionDescription, double transactionAmount,
                      TransactionType transactionType, long entryTime) {
        this.alphaAccountId = alphaAccountId;
        this.betaAccountId = betaAccountId;
        this.categoryId = categoryId;
        this.transactionDescription = transactionDescription;
        this.transactionAmount = transactionAmount;
        this.transactionType = transactionType;
        this.entryTime = entryTime;
    }

    /**
     * Gets the unique identifier for this Transaction.
     *
     * @return The Transaction ID
     */
    public int getPTransactionId() {
        return transactionId;
    }

    /**
     * Sets the unique identifier for this Transaction.
     * This is typically managed by Room and not set manually.
     *
     * @param transactionId The Transaction ID to set
     */
    public void setPTransactionId(int transactionId) {
        this.transactionId = transactionId;
    }

    /**
     * Gets the ID of the associated AlphaAccount.
     *
     * @return The AlphaAccount ID
     */
    public int getPAlphaAccountId() {
        return alphaAccountId;
    }

    /**
     * Sets the ID of the associated AlphaAccount.
     *
     * @param alphaAccountId The AlphaAccount ID to set
     */
    public void setPAlphaAccountId(int alphaAccountId) {
        this.alphaAccountId = alphaAccountId;
    }

    /**
     * Gets the ID of the specific BetaAccount.
     *
     * @return The BetaAccount ID
     */
    public int getPBetaAccountId() {
        return betaAccountId;
    }

    /**
     * Sets the ID of the specific BetaAccount.
     *
     * @param betaAccountId The BetaAccount ID to set
     */
    public void setPBetaAccountId(int betaAccountId) {
        this.betaAccountId = betaAccountId;
    }

    /**
     * Gets the ID of the transaction category.
     *
     * @return The Category ID
     */
    public int getCategoryId() {
        return categoryId;
    }

    /**
     * Sets the ID of the transaction category.
     *
     * @param categoryId The Category ID to set
     */
    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    /**
     * Gets the description or note for this transaction.
     *
     * @return The transaction description
     */
    public String getPTransactionDescription() {
        return transactionDescription;
    }

    /**
     * Sets the description or note for this transaction.
     *
     * @param transactionDescription The transaction description to set
     */
    public void setPTransactionDescription(String transactionDescription) {
        this.transactionDescription = transactionDescription;
    }

    /**
     * Gets the monetary amount of this transaction.
     *
     * @return The transaction amount
     */
    public double getPTransactionAmount() {
        return transactionAmount;
    }

    /**
     * Sets the monetary amount of this transaction.
     *
     * @param transactionAmount The transaction amount to set
     */
    public void setPTransactionAmount(double transactionAmount) {
        this.transactionAmount = transactionAmount;
    }

    /**
     * Gets the type of this transaction (CREDIT or DEBIT).
     *
     * @return The transaction type
     */
    public TransactionType getPTransactionType() {
        return transactionType;
    }

    /**
     * Sets the type of this transaction (CREDIT or DEBIT).
     *
     * @param transactionType The transaction type to set
     */
    public void setPTransactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
    }

    /**
     * Gets the timestamp when this transaction was recorded.
     *
     * @return The entry time as a Unix timestamp (milliseconds since epoch)
     */
    public long getPEntryTime() {
        return entryTime;
    }

    /**
     * Sets the timestamp when this transaction was recorded.
     *
     * @param entryTime The entry time to set as a Unix timestamp (milliseconds since epoch)
     */
    public void setPEntryTime(long entryTime) {
        this.entryTime = entryTime;
    }
}