package com.dzovah.mesha.Database.Entities;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import com.dzovah.mesha.Database.Interfaces.AccountOperations;

import java.util.List;

/**
 * Entity class representing a top-level private (P) account in the Mesha financial management system.
 *
 * A PAlphaAccount is a primary financial container that can hold multiple PBetaAccounts.
 * The total balance of a PAlphaAccount is calculated as the sum of all its associated
 * PBetaAccount balances.
 *
 * PAlphaAccounts help organize financial resources at a high level, such as grouping
 * accounts by institution or purpose.
 *
 * @author Electra Magus
 * @version 1.1
 * @see PBetaAccount
 */
@Entity(tableName = "PAlpha_accounts")
public class PAlphaAccount implements AccountOperations {

    /**
     * Unique identifier for the PAlphaAccount.
     * This ID is auto-generated by Room when a new PAlphaAccount is inserted.
     */
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "PAlpha_account_id")
    public int alphaAccountId;

    /**
     * The name of the PAlphaAccount.
     */
    @ColumnInfo(name = "PAlpha_account_name")
    public String alphaAccountName;

    /**
     * The path to the icon image for this PAlphaAccount.
     */
    @ColumnInfo(name = "PAlpha_account_icon")
    public String alphaAccountIcon;

    /**
     * The current balance of the PAlphaAccount.
     */
    @ColumnInfo(name = "PAlpha_account_balance")
    public double alphaAccountBalance;

    /**
     * Creates a new PAlphaAccount.
     *
     * @param alphaAccountName   The name of the account
     * @param alphaAccountIcon   The icon path (null defaults to system icon)
     * @param alphaAccountBalance The initial balance
     */
    public PAlphaAccount(String alphaAccountName, String alphaAccountIcon, double alphaAccountBalance) {
        this.alphaAccountName = alphaAccountName;
        this.alphaAccountIcon = (alphaAccountIcon != null) ? alphaAccountIcon : "default_icon"; // Ensure a valid default
        this.alphaAccountBalance = alphaAccountBalance;
    }

    // Getters & Setters

    public int getPAlphaAccountId() {
        return alphaAccountId;
    }

    public String getPAlphaAccountName() {
        return alphaAccountName;
    }

    public void setPAlphaAccountName(String alphaAccountName) {
        this.alphaAccountName = alphaAccountName;
    }

    public String getPAlphaAccountIcon() {
        return alphaAccountIcon;
    }

    public void setPAlphaAccountIcon(String alphaAccountIcon) {
        this.alphaAccountIcon = alphaAccountIcon;
    }

    public double getPAlphaAccountBalance() {
        return alphaAccountBalance;
    }

    public void setPAlphaAccountBalance(double alphaAccountBalance) {
        this.alphaAccountBalance = alphaAccountBalance;
    }

    /**
     * Updates the balance of this account by summing the balances of all linked BetaAccounts.
     *
     * @param betaAccounts The list of associated PBetaAccounts
     */
    @Ignore // Prevent Room from treating this method as a column
    public void updateBalanceFromBetaAccounts(List<PBetaAccount> betaAccounts) {
        double totalBalance = 0;
        for (PBetaAccount beta : betaAccounts) {
            totalBalance += beta.getPBetaAccountBalance();
        }
        this.alphaAccountBalance = totalBalance;
    }
    
    /**
     * Updates the account balance based on transactions.
     * <p>
     * This implementation is a placeholder as balance is updated through updateBalanceFromBetaAccounts.
     * The actual update should be done through TransactionManager to ensure data integrity.
     * </p>
     *
     * @return true if the update was successful, false otherwise
     */
    @Override
    @Ignore
    public boolean updateBalance() {
        // This is handled externally by the TransactionManager
        // as we need access to the DAOs to fetch the associated PBetaAccounts
        return true;
    }
    
    /**
     * Validates the account data to ensure integrity.
     * <p>
     * Checks if the account has valid data according to business rules.
     * </p>
     *
     * @return true if the account data is valid, false otherwise
     */
    @Override
    @Ignore
    public boolean validateData() {
        // Basic validation: name should not be empty and balance should be valid
        return alphaAccountName != null && !alphaAccountName.trim().isEmpty() 
                && alphaAccountIcon != null;
    }
    
    /**
     * Gets the account identifier.
     *
     * @return The unique identifier for the account
     */
    @Override
    @Ignore
    public int getAccountId() {
        return alphaAccountId;
    }
    
    /**
     * Gets the account name.
     *
     * @return The name of the account
     */
    @Override
    @Ignore
    public String getAccountName() {
        return alphaAccountName;
    }
    
    /**
     * Gets the account balance.
     *
     * @return The current balance of the account
     */
    @Override
    @Ignore
    public double getAccountBalance() {
        return alphaAccountBalance;
    }
}
